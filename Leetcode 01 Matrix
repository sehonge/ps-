/* Problem
Given a matrix consists of 0 and 1, find the distance of the nearest 0 for each cell.
The distance between two adjacent cells is 1. 

Example 1:
Input:
[[0,0,0],
 [0,1,0],
 [0,0,0]]
Output:
[[0,0,0],
 [0,1,0],
 [0,0,0]]
 
Example 2:
Input:
[[0,0,0],
 [0,1,0],
 [1,1,1]]
Output:
[[0,0,0],
 [0,1,0],
 [1,2,1]] 

Note:
1.The number of elements of the given matrix will not exceed 10,000.
2.There are at least one 0 in the given matrix.
3.The cells are adjacent in only four directions: up, down, left and right.
*/

#include <vector>
#include <queue>
#include <iostream>
using namespace std;

class Solution {    
public:
    int len_r, len_c;
    int dr[4] = {-1, 0, 1, 0};
    int dc[4] = {0, -1, 0, 1};
    vector<vector<int>> map, dist;
    queue<pair<int, int>> q;
    
    void bfs(){        
        int i, j, cur_r, cur_c, next_r, next_c;        
        
        while(!q.empty()){
            cur_r = q.front().first, cur_c = q.front().second;
            q.pop();
            
            for(i = 0; i < 4; i++){
                next_r = cur_r + dr[i], next_c = cur_c + dc[i];
                if(next_r < 0 || next_r >= len_r || next_c < 0 || next_c >= len_c) continue;
                if(dist[next_r][next_c] > dist[cur_r][cur_c] + 1){
                    dist[next_r][next_c] = dist[cur_r][cur_c] + 1;
                    q.push(make_pair(next_r, next_c));                    
                }        
            }            
        }        
        return;
    }
    
    vector<vector<int>> updateMatrix(vector<vector<int>>& matrix) {
        vector<vector<int>> ret;
        int i, j, flag, cnt;
        
        map = matrix;
        len_r = matrix.size(), len_c = matrix[0].size();
        dist.resize(len_r);
        for(i = 0; i < len_r; i++) dist[i].resize(len_c, 10001);
                
        for(i = 0; i < len_r; i++){
            for(j = 0; j < len_c ;j++){
                if(map[i][j] == 0)
                    q.push(make_pair(i, j)), dist[i][j] = 0;                
            }
        }
        bfs();        
        
        return dist;    
    }
};
